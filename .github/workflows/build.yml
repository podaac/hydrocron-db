# This is the main build pipeline that verifies and publishes the software
name: Build
# Controls when the workflow will run
on:
  # Triggers the workflow on push events
  push:
    branches: [ develop, release/**, main, feature/**, issue/**, dependabot/** ]
    tags-ignore:
      - '*'
    paths-ignore:
      - 'pyproject.toml'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  POETRY_VERSION: "1.3.1"
  PYTHON_VERSION: "3.10"
  PROJECT_ NAME: podaac/hydrocron
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # First job in the workflow installs and verifies the software
  build:
    name: Build, Test, Verify, Publish
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      - uses: getsentry/action-github-app-token@v2
        name: podaac cicd token
        id: podaac-cicd
        with:
          app_id: ${{ secrets.CICD_APP_ID }}
          private_key: ${{ secrets.CICD_APP_PRIVATE_KEY }}
      - uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          token: ${{ steps.podaac-cicd.outputs.token }}
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}




          

      ## Set environment variables
      - name: Configure Initial YAML file and environment variables
        run: |
          echo "THE_VERSION=0.0.1" >> $GITHUB_ENV;
          echo "GIT_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV;
          GITHUB_REF_READABLE="${GITHUB_REF//\//-}"
          echo "GITHUB_REF_READABLE=${GITHUB_REF_READABLE}" >> $GITHUB_ENV
          echo "THE_ENV=sit" >> $GITHUB_ENV
          echo "TARGET_ENV_UPPERCASE=SIT" >> $GITHUB_ENV

      # Setup Terraform to Deploy

      - name: Configure AWS Credentials as Environment Variables
        run: echo "AWS_ACCESS_KEY_ID=${{ secrets[format('AWS_ACCESS_KEY_ID_SERVICES_{0}', env.TARGET_ENV_UPPERCASE)] }}" >> $GITHUB_ENV |
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets[format('AWS_SECRET_ACCESS_KEY_SERVICES_{0}', env.TARGET_ENV_UPPERCASE)] }}" >> $GITHUB_ENV

      - name: Validate AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-west-2
          role-session-name: GitHubActions
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets[format('AWS_ACCESS_KEY_ID_SERVICES_{0}', env.TARGET_ENV_UPPERCASE)] }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[format('AWS_SECRET_ACCESS_KEY_SERVICES_{0}', env.TARGET_ENV_UPPERCASE)] }}
      - run: aws sts get-caller-identity

      - uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: 1.0.3


      - name: Deploy Terraform
        if: |
          github.ref == 'refs/heads/develop' ||
          github.ref == 'refs/heads/main'    ||
          startsWith(github.ref, 'refs/heads/release') ||
          github.event.head_commit.message == '/deploy sit' ||
          github.event.head_commit.message == '/deploy uat'
        working-directory: terraform/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets[format('AWS_ACCESS_KEY_ID_SERVICES_{0}', env.TARGET_ENV_UPPERCASE)] }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[format('AWS_SECRET_ACCESS_KEY_SERVICES_{0}', env.TARGET_ENV_UPPERCASE)] }}
          AWS_DEFAULT_REGION: us-west-2

        run: |
          source bin/config.sh ${{ env.THE_ENV }}
          
          #aws lambda delete-function --function-name arn:aws:lambda:us-west-2:206226843404:function:service-hydrocron-api-sit-function
          
          terraform init -reconfigure -backend-config="bucket=podaac-services-${{ env.THE_ENV }}-terraform" -backend-config="region=us-west-2"
          terraform plan -var-file=tfvars/${{ env.THE_ENV }}.tfvars -var="app_version=${{ env.THE_VERSION }}" -out="tfplan"
          terraform apply -auto-approve tfplan
          

      - name: Load sample
        #if: ${{ startsWith(github.ref, 'test') }}
        run: python3 /home/runner/work/hydrocron-db/tests/example_load_data.py